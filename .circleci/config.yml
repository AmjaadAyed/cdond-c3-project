version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:

  build-backend:
   
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run: npm i --prefix backend
      - run: npm run --prefix backend

  build-frontend:
    
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run: npm i --prefix frontend
    

  test-backend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix backend
      - run: npm run test --prefix backend --force

  test-frontend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix frontend
      - run: npm run test --prefix frontend
            


  scan-frontend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build]"]
      - run:
          name: Install Frontend deps
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force


  scan-backend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install Backend deps
          command: |
            cd backend
            npm install
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force



  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Ensure backend infrastructure exists
          command: |
            # build-backend:
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text | tr -d '\n'`
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # put it in the shared memory
            curl -H "Content-Type: text/plain" \
              -H "token: e38aee29-a976-4696-843d-2d115c52219a" \
              --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add .env vars to backend distro
          command: |
            echo ENVIROMENT=production > "backend/.env"     
            echo NODE_ENV=production > "backend/.env"       
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/     





  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.10-ubuntu-18.04
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "08:de:ee:d2:18:64:92:f6:9a:32:3f:c5:4f:92:aa:07"

      - run:
          name: Install dependencies
          command: |
            apt -y update
            apt -y install jq tar gzip git curl
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migration
          command: |
            # Your code here
            cd backend
            echo ENVIRONMENT=$ENVIRONMENT > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations > migration_status
            cat migration_status
  # run-migrations:
  #   docker:
  #     - image: cimg/node:13.14.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: awscli install
  #         command: |
  #           sudo apt-get -y -qq update
  #           sudo apt-get -y -qq install python3
  #           sudo apt-get -qq install awscli
  #           pwd
  #           ls -la
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm i
  #           npm run migrations > /tmp/npm_migration.log
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           if [[ `grep "has been executed successfully" /tmp/npm_migration.log | wc -l` -gt 0 ]] ; then
  #             curl -H "Content-Type: text/plain" \
  #               -H "token: ${MEMSTASH_TOKEN}" \
  #               --request PUT \
  #               --data "1" https://api.memstash.io/values/npm_migration_${CIRCLE_WORKFLOW_ID:0:7}
  #             echo "Migration Complete"

              
  # run-migrations:
  #   docker:
  #     - image: circleci/node:latest
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #         paths:
  #           - project/
  #     - run:
  #         name: awscli install
  #         command: |
  #           sudo apt-get -y -qq update
  #           sudo apt-get -y -qq install python3
  #           sudo apt-get -qq install awscli
  #           pwd
  #           ls -la
  #     - run:
  #         name: add values to .env files
  #         command: |
  #           echo PWD
  #           pwd
  #           #ls -la
  #           touch backend/.env
  #           echo ENVIRONMENT=production >> "backend/.env"
  #           echo TYPEORM_CONNECTION=postgres >> "backend/.env"
  #           echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
  #           echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend 
  #           npm install
  #           npm run build
  #           pwd
  #           echo " THIS IS .env CONTENTS:"
  #           cat .env
  #           echo 'DUMP MIGRATIONS'
  #           echo 'hello world!!' > migrations_dump.txt
  #           npm run migrations >> migrations_dump.txt
  #           echo "I AM HERE!!" 
  #           pwd
  #           ls -la
  #           echo 'DISPLAY CONTENTS'
  #           echo '*****************'
  #           cat migrations_dump.txt



  #  deploy-backend: 
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["08:de:ee:d2:18:64:92:f6:9a:32:3f:c5:4f:92:aa:07"]
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/project
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update tar gzip ansible nodejs npm curl openssh-client
  #           pip install awscli
  #     - run:
  #         name: Deploy backend
  #         no_output_timeout: 
  #         command: |
  #           pwd            
  #           cd .circleci/ansible
  #           export ANSIBLE_HOST_KEY_CHECKING=False
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  #  deploy-frontend: 
  #   docker:
  #      # Docker image here that supports AWS CLI
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update tar gzip ansible nodejs npm curl
  #           pip install awscli
  #     - run:
  #         name: Get backend url
  #         command: |
  #           BACKEND_IP=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
  #             --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # echo "${API_URL}"
  #           cd frontend
  #           npm install
  #           npm install -g webpack webpack-cli
  #           #npm install -D webpack-cli
  #           #npm install dotenv-webpack
  #           #npm audit fix
  #           BACKEND_IP=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
  #               --request GET https://api.memstash.io/values/hosts-deployed-${CIRCLE_WORKFLOW_ID:0:7})
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL=${API_URL}"
  #           echo API_URL=$API_URL > .env
  #           echo ENVIRONMENT=development >> .env
  #           # echo NODE_ENV=production >> .env
  #           cat ".env"
  #           npm run build
  #           cd dist
  #           aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 


  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    

  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  




  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
