version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:

  build-backend:
   
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run: npm i --prefix backend
      - run: npm run --prefix backend

  build-frontend:
    
    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run: npm i --prefix frontend
    

  test-backend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix backend
      - run: npm run test --prefix backend

  test-frontend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix frontend
      - run: npm run test --prefix frontend
            


  scan-frontend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build]"]
      - run:
          name: Install Frontend deps
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force


  scan-backend:

    docker:
      - image: circleci/node:14.11.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install Backend deps
          command: |
            cd backend
            npm install
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout  
      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip jq git   
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=your-tag \
               --stack-name backend-${CIRCLE_WORKFLOW_ID} \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
               --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add backend ip to ansible inventory
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text | tr -d '\n'`
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            # put it in the shared memory
            curl -H "Content-Type: text/plain" \
              -H "token: e38aee29-a976-4696-843d-2d115c52219a" \
              --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - run:
          name: Ensure frontend infrastructure exist
          command: |
            yum -y install tar gzip
            # build-frontend:
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      





  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.10-ubuntu-18.04
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "08:de:ee:d2:18:64:92:f6:9a:32:3f:c5:4f:92:aa:07"

      - run:
          name: Install dependencies
          command: |
            apt -y update
            apt -y install jq tar gzip git curl
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook configure-server.yml --inventory-file=inventory.txt
      # Here's where you will add some code to rollback on failure      



  run-migrations:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs npm tar gzip jq git
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > /tmp/migration.log
      - run:
          name: Send migration results to memstash
          command: |
            MIGRATION_COUNT=`grep -c "has been executed successfully" /tmp/migration.log || true`
            echo "migrations count: ${MIGRATION_COUNT}"
            if [[ $MIGRATION_COUNT -gt 0 ]];
            then
              # put it in the shared memory
              curl -H "Content-Type: text/plain" \
               -H "token: e38aee29-a976-4696-843d-2d115c52219a" \
               --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi







  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]